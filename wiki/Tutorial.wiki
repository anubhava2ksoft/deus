#summary This is a brief tutorial on DEUS.

= Introduction =

Each release contains sources (in the src/ folder), docs and examples.
Sources include the following packages:

  * {{{it.unipr.ce.dsg.deus.automator}}} (classes for batch simulations with automatically changing parameters)
  * {{{it.unipr.ce.dsg.deus.automator.gui}}} (the GUI for managing batch simulations)
  * {{{it.unipr.ce.dsg.deus.core}}} (core interfaces and classes, such as Event, Node, Process)
  * {{{it.unipr.ce.dsg.deus.impl.event}}} (implementation of common events, such as node birth)
  * {{{it.unipr.ce.dsg.deus.impl.node}}} (implementation of basic node classes)
  * {{{it.unipr.ce.dsg.deus.impl.process}}} (implementation of common processes, such as Poisson)
  * {{{it.unipr.ce.dsg.deus.impl.resource}}} (implementation of basic resource classes)
  * {{{it.unipr.ce.dsg.deus.p2p.event}}} (P2P-specific events, such as connection)
  * {{{it.unipr.ce.dsg.deus.p2p.node}}} (P2P-specific node types, such as Peer)
  * {{{it.unipr.ce.dsg.deus.schema}}} (classes that map DEUS schema)
  * {{{it.unipr.ce.dsg.deus.schema.automator}}} (classes that map DEUS' XML schema)
  * {{{it.unipr.ce.dsg.deus.util}}} (utility classes)

Moreover, under the "examples" folder there are some useful simulation examples (with source code, configuration file and automator file).


= Configuring simulations =

The XML schema.. The configuration file.. The automator..


= Seeds =

The user sets a seed in the {{{<aut:engine>}}} tag. This seed is used to generate N seeds, one for each of the _declared_ events, to initialize its own Random Number Generator (RNG). In this way, for example, if the initial seed is S, and there are two declared events (e1 and e2), their respective seeds will be S1 and S2. If their scheduling is associated to a random process, if we configure the simulation to run both kinds of event, the schedules of their instances will be:
  * from S1, for e1: t11, t12, t13, etc.
  * from S2, for e2: t21, t22, t23, etc.
If we configure the simulationto run, for example, only e1, the schedules of its instances will be again: t11, t12, t13, etc.

If you modify the XML and declare another event e3 between the declaration of e1 and e2, in general the seeds will change (S1 will remain the same, S2 will become S3, and a new seed will be associated to e2). Be careful!! Suggestion: declare all the events and use only those you need. If you add new events, add them after those already declared.


= Writing logs =

In your Log event, use the following code:

{{{
AutomatorLogger a = new AutomatorLogger("logger");
ArrayList<LoggerObject> fileValue = new ArrayList<LoggerObject>();
}}}

then, if you want to log the value of a variable called "var", use:

{{{
fileValue.add(new LoggerObject("var", value));
a.write(Engine.getDefault().getVirtualTime(), fileValue);
}}}


= Running simulations =

We suggest to import deus in Eclipse and to run the simulations from there.

Project: deus

Main Class: {{{it.unipr.ce.dsg.deus.automator.gui.DeusAutomatorFrame}}}

Program Arguments: 
the first parameter passed is the path of the XML configuration file, while the second is the name of the XML file that will be generated by the Automator  

VM Arguments: {{{-Djava.util.logging.config.file=logging.properties -Xms256M -Xmx1000M}}}


Once the DEUS Automator GUI has loaded, you can configure which node paramaters, processes, etc. to vary in order to create many different simulations from the XML configuration file (that was introduced as first program argument).

For example, if a node has an integer parameter "x", you can add in the Node Parameter panel a rule to make "x" vary from an initial value, let say 1, to a final value, let say 5, with a step, e.g. 1. Then you can {{{Save}}} this configuration in a text file, to be reused in the future. If you press the {{{Run}}} button, 5 simulations are sequentially executed (one for each value of "x"). You can also set several seeds, other than default one, thus if you set 2 seeds, the number of simulations becomes 10.  

Very important is the {{{GnuPlot File}}} panel. Here you can define files in which to put bidimensional data to be plotted. 

For example, suppose that you have Logger that periodically computes the value of a variable "y". You can define a file (call it yVariation.txt, for example) with X label "VT" (virtual time) and Y Label "y". Then, after each simulation, you will have a yVariation.txt file reporting the values of y (first column) with respect to virtual time (second column). 


= Basic examples =