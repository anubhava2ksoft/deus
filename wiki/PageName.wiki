#summary This is a brief tutorial on DEUS.

= Introduction =

Each release contains sources (in the src/ folder), docs and examples.
Sources include the following packages:

  * it.unipr.ce.dsg.deus.core (core interfaces and classes, such as Event, Node, Process)
  * it.unipr.ce.dsg.deus.impl.event (implementation of common events, such as node birth)
  * it.unipr.ce.dsg.deus.impl.node (implementation of basic node classes)
  * it.unipr.ce.dsg.deus.impl.process (implementation of common processes, such as Poisson)
  * it.unipr.ce.dsg.deus.impl.resource (implementation of basic resource classes)
  * it.unipr.ce.dsg.deus.p2p.event (P2P-specific events, such as connection)
  * it.unipr.ce.dsg.deus.p2p.node (P2P-specific node types, such as Peer)
  * it.unipr.ce.dsg.deus.schema (classes that map DEUS' schema)
  * it.unipr.ce.dsg.deus.util (utility classes)


= Configuring simulations =

The schema.. The configuration XML..


= Basic examples =

== Growth Connections ==

== Single Speed Growth ==

== Two Speeds Growth ==


= REVOL example =

REVOL is a P2P system for sharing consumable resources, i.e. resources that cannot be acquired (by replication) once discovered, but may only be directly used upon contracting with their hosts. An example of consumable resource is disk space, which can be partitioned and allocated to requestors for the duration of a task, or in general for an arranged time. 

REVOL networks are unstructured, and can be represented as undirected graphs whose arcs stand for mutual knowledge among peers. The node degree k is the number of neighbors of each node. Its statistical distribution depends on the history and on the dynamics of the network, and may affect the performance of the distributed algorithms which are executed.

The protocol executed by each REVOL peer involved in a resource discovery process is based on epidemic propagation of queries. Each query message generated by a peer is matched with local resources and eventually propagated to neighbors. Each peer has a cache which contains advertisements of resources previously discovered in other peers. The cache is used as a preferred alternative to random (i.e. blind) query propagation. Each query message has a time-to-live (TTL) which is the remaining number of hops before the query message itself expires (i.e. it is no longer propagated).

The resource discovery process is affected by the following parameters, representing the phenotype of each REVOL peer:

  * f_k = fraction of neighbors targeted for query propagation  
  * TTL_max = max number of hops for messages 
  * D_max = max size of the cache 

These parameters are randomly initialized when a peer is created and joins the network.

The configuration file for the Basic Revol example defines:

  * birth events (each one creating a node and instantiating a one-shot connection event, many discovery events with Poisson scheduling, a one-shot disconnection event and a one-shot death event)
  * REVOL nodes (with 3 kinds of consumable resources: CPU, RAM, disk)
  * Poisson processes regulating the scheduling of events characterizing the behavior of REVOL nodes
  * periodic processes regulating the scheduling of log events (population size, node degree distribution, performance statistics)
  

= Chord example =
 
Matteo is working on this.